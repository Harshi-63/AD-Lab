Flask
Flask-Cors
PyPDF2
pandas
langchain
ollama
import os
from flask import Flask, request, jsonify
from flask_cors import CORS
from werkzeug.utils import secure_filename
from llama_index.core import VectorStoreIndex
from llama_index.embeddings.huggingface import HuggingFaceEmbedding
from llama_index.llms.ollama import Ollama
from llama_index.core.schema import Document
from llama_index.core.query_engine import RetrieverQueryEngine
from llama_index.core.settings import Settings

# Initialize Flask app
app = Flask(__name__)
CORS(app)

# Define upload folder
UPLOAD_FOLDER = "uploads"
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER

# Load Local Embedding Model
embed_model = HuggingFaceEmbedding(model_name="sentence-transformers/all-MiniLM-L6-v2")

# Initialize Ollama as Local LLM
llm = Ollama(model="llama2")  # Change to "gemma" or another supported model if needed

# Update global settings instead of using ServiceContext
Settings.embed_model = embed_model
Settings.llm = llm

# Store documents globally for retrieval
documents = []
index = None


def extract_text_from_file(file_path):
    """Extract text from PDF, Word, or Excel files."""
    from PyPDF2 import PdfReader
    import docx
    import pandas as pd

    text = ""
    ext = os.path.splitext(file_path)[1].lower()

    try:
        if ext == ".pdf":
            reader = PdfReader(file_path)
            text = "\n".join([page.extract_text() for page in reader.pages if page.extract_text()])
        elif ext == ".docx":
            doc = docx.Document(file_path)
            text = "\n".join([para.text for para in doc.paragraphs])
        elif ext in [".xls", ".xlsx"]:
            df = pd.read_excel(file_path)
            text = df.to_string()
        else:
            text = "Unsupported file format."
    except Exception as e:
        text = f"Error extracting text: {str(e)}"

    return text


@app.route("/upload", methods=["POST"])
def upload_file():
    global index, documents

    if "file" not in request.files:
        return jsonify({"error": "No file part"}), 400

    file = request.files["file"]
    if file.filename == "":
        return jsonify({"error": "No selected file"}), 400

    # Secure filename and save it
    filename = secure_filename(file.filename)
    file_path = os.path.join(app.config["UPLOAD_FOLDER"], filename)
    file.save(file_path)

    # Extract text from the document
    extracted_text = extract_text_from_file(file_path)

    # Store extracted text as a document
    document = Document(text=extracted_text)
    documents.append(document)

    # Create or update the index
    index = VectorStoreIndex.from_documents(documents)

    return jsonify({"message": "File uploaded and processed successfully!"})


@app.route("/chat", methods=["POST"])
def chat():
    global index

    if not index:
        return jsonify({"error": "No documents have been uploaded yet"}), 400

    data = request.get_json()
    query_text = data.get("query")

    if not query_text:
        return jsonify({"error": "Query text is required"}), 400

    # Create a query engine and get a response
    retriever = index.as_retriever()
    query_engine = RetrieverQueryEngine(retriever=retriever)
    response = query_engine.query(query_text)

    return jsonify({"response": str(response)})


if __name__ == "__main__":
    app.run(debug=True)
